# source: https://www.youtube.com/watch?v=2vJtbAha3To

from keras import backend as K
from keras.layers import Dense, Input, LSTM
from keras.models import Model
from keras.optimizers import RMSprop
import numpy as np

class Agent(object):
    def __init__(self, alpha, beta, gamma=0.99, n_actions = 3, layer_size = 48, input_dims = 132):
        self.gamma = gamma
        self.alpha = alpha
        self.beta = beta
        self.input_dims = input_dims
        self.lstm_dims = 48
        self.n_actions = n_actions

        self.actor, self.critic, self.policy = self.build_actor_critic_network()
        self.action_space = [i for i in range(self.n_actions)]

    def build_actor_critic_network(self):

        input = Input(shape=(self.input_dims,))
        delta = Input(shape=[1])
        lstm_layer = LSTM(self.lstm_dims)(input)
        probs = Dense(self.n_actions, activation='softmax')(lstm_layer)
        values = Dense(self.n_actions, actiation='linear')

        def custom_loss(y_true, y_pred): # y_true - selected Action, y_pred - props value output
            out = K.clip(y_pred, 1e-8, 1-1e-8)
            log_likelihood = y_true*K.log(out)

            return K.sum(-log_likelihood*delta) # delta - is the advantage?

        actor = Model(input=[input, delta], output=[probs])
        actor.compile(optimizer=RMSprop(lr=self.alpha), loss=custom_loss)

        critic = Model(input=[input], output=[values])
        critic.compile(optimizer=RMSprop(lr=self.beta), loss='mean_squared_error')

        policy = Model(input=[input], output=[probs])

        return actor, critic, policy

    def choose_action(self, observation):
        state = observation[np.newaxis,:]
        probabilities = self.policy.predict(state)[0]
        action = np.random.choice(self.action_space, p=probabilities)

        return action

    def learn(self, state, action, reward, next_state, done):
        state = state[np.newaxis,:]
        next_state = next_state[np.newaxis,:]

        critic_value = self.critic.predict(state)
        critic_value_ = self.critic.predict(next_state)

        target = reward + self.gamma*critic_value_*(1 - int(done)) # only take value of next state into account when episode is not finished
        delta = target - critic_value

        actions = np.zeros([1, self.n_actions])
        actions[np.arange(1), action] = 1.0

        self.actor.fit([state, delta], actions, verbose=0)
        self.critic.fit(state, target, verbose=0 )
